{
    "version": "https://jsonfeed.org/version/1",
    "title": "The course of true love never did run smooth. • All posts by \"docker\" tag",
    "description": "不知道写啥",
    "home_page_url": "http://tuyustar.cn",
    "items": [
        {
            "id": "http://tuyustar.cn/%E6%8A%80%E6%9C%AF%E5%A4%A7%E6%9D%82%E7%83%A9/%E5%9C%A8Ubuntu%E4%B8%AD%E5%AE%89%E8%A3%85Docker%E5%92%8Cdocker%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "http://tuyustar.cn/%E6%8A%80%E6%9C%AF%E5%A4%A7%E6%9D%82%E7%83%A9/%E5%9C%A8Ubuntu%E4%B8%AD%E5%AE%89%E8%A3%85Docker%E5%92%8Cdocker%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "Ubuntu安装Docker和docker的使用",
            "date_published": "2020-12-01T02:58:04.000Z",
            "content_html": "<h1 id=\"docker-概述\"><a class=\"markdownIt-Anchor\" href=\"#docker-概述\">#</a> Docker 概述</h1>\n<blockquote>\n<p><code>Docker </code> 是一个开源的应用容器引擎，基于 <code>Go语言</code> 并遵从 Apache2.0 协议开源。</p>\n<p><code>Docker </code> 可以让开发者打包他们的应用以及依赖包到一个 <code>轻量级</code> 、 <code>可移植</code> 的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p>\n<p>容器是完全使用 <code>沙箱机制</code> ，相互之间不会有任何接口（类似 iPhone 的 app）, 更重要的是容器性能开销极低。</p>\n</blockquote>\n<h1 id=\"docker应用场景\"><a class=\"markdownIt-Anchor\" href=\"#docker应用场景\">#</a> Docker 应用场景</h1>\n<blockquote>\n<p><code>Web </code> 应用的自动化打包和发布。</p>\n<p>自动化测试和持续集成、发布。</p>\n<p>在服务型环境中部署和调整数据库或其他的后台应用。</p>\n<p>从头编译或者扩展现有的  <code>OpenShift</code>  或  <code>Cloud Foundry</code>  平台来搭建自己的  <code>PaaS</code>  环境</p>\n</blockquote>\n<h1 id=\"docker-的优点\"><a class=\"markdownIt-Anchor\" href=\"#docker-的优点\">#</a> Docker 的优点</h1>\n<blockquote>\n<p><code>Docker</code>  是一个用于开发，交付和运行应用程序的开放平台。Docker 使您能够将应用程序与基础架构分开，从而可以快速交付软件。借助 Docker，您可以与管理应用程序相同的方式来管理基础架构。通过利用 Docker 的方法来 <code>快速交付</code> ， <code>测试</code> 和 <code>部署代码</code> ，您可以大大减少编写代码和在生产环境中运行代码之间的延迟。</p>\n</blockquote>\n<h1 id=\"在ubuntu中安装docker\"><a class=\"markdownIt-Anchor\" href=\"#在ubuntu中安装docker\">#</a> 在 Ubuntu 中安装 Docker</h1>\n<ol>\n<li>更新 ubuntu 的 apt 源索引</li>\n</ol>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sudo apt-get update</pre></td></tr></table></figure><ol start=\"2\">\n<li>安装包允许 apt 通过 HTTPS 使用仓库</li>\n</ol>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sudo apt-get install \\</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    apt-transport-https \\</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ca-certificates \\</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    curl \\</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    software-properties-common</pre></td></tr></table></figure><ol start=\"3\">\n<li>添加 Docker 官方 GPG key</li>\n</ol>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</pre></td></tr></table></figure><ol start=\"4\">\n<li>设置 Docker 稳定版仓库</li>\n</ol>\n<pre><code class=\"language-dock\">sudo add-apt-repository \\\n   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable&quot;\n</code></pre>\n<ol start=\"5\">\n<li>添加仓库后，更新 apt 源索引</li>\n</ol>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sudo apt-get update</pre></td></tr></table></figure><ol start=\"6\">\n<li>安装最新版 Docker CE（社区版）</li>\n</ol>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sudo apt-get install docker-ce</pre></td></tr></table></figure><ol start=\"7\">\n<li>检查 Docker CE 是否安装正确</li>\n</ol>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sudo docker run hello-world</pre></td></tr></table></figure><ol start=\"8\">\n<li>出现如下信息，表示安装成功</li>\n</ol>\n<p><img data-src=\"1.png\" alt=\"\"></p>\n<h1 id=\"docker使用\"><a class=\"markdownIt-Anchor\" href=\"#docker使用\">#</a> Docker 使用</h1>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 启动 docker</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sudo service docker start</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 停止 docker</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>sudo service docker stop</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 重启 docker</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>sudo service docker restart</pre></td></tr></table></figure><h2 id=\"容器使用\"><a class=\"markdownIt-Anchor\" href=\"#容器使用\">#</a> 容器使用</h2>\n<ol>\n<li>启动容器</li>\n</ol>\n<details class=\"info\"><summary>参数说明</summary><div>\n<p>-i: 交互式操作</p>\n<p>-t: 终端</p>\n<p>redis:redis 镜像</p>\n</div></details>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run -it redis</pre></td></tr></table></figure><ol start=\"2\">\n<li>停止一个容器</li>\n</ol>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker stop &lt;容器 ID></pre></td></tr></table></figure><ol start=\"3\">\n<li>重启，停止的容器</li>\n</ol>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker restart &lt;容器 ID></pre></td></tr></table></figure><ol start=\"4\">\n<li>进入容器</li>\n</ol>\n<ul>\n<li>在使用  <code>-d</code>  参数时，容器启动后会进入后台。此时想要进入容器，可以通过以下指令进入</li>\n</ul>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker attach &lt;容器 ID></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker exec -it &lt;容器 ID>           # 推荐大家使用 docker exec 命令，因为此退出容器终端，不会导致容器的停止。</pre></td></tr></table></figure><ol start=\"5\">\n<li>kill 掉一个已经在运行的容器</li>\n</ol>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker kill &lt;容器 ID></pre></td></tr></table></figure><ol start=\"6\">\n<li>清理掉所有处于终止状态的容器</li>\n</ol>\n<pre><code>docker container prune\n</code></pre>\n<ol start=\"7\">\n<li>删除容器</li>\n</ol>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker rm -f &lt;容器 ID></pre></td></tr></table></figure><h2 id=\"镜像使用\"><a class=\"markdownIt-Anchor\" href=\"#镜像使用\">#</a> 镜像使用</h2>\n<ol>\n<li>列出镜像</li>\n</ol>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker images</pre></td></tr></table></figure><details class=\"info\"><summary>各个选项说明</summary><div>\n<p>REPOSITORY：镜像所在的仓库名称</p>\n<p>TAG：镜像标签</p>\n<p>IMAGEID：镜像 ID</p>\n<p>CREATED：镜像的创建日期 (不是获取该镜像的日期)</p>\n<p>SIZE：镜像大小</p>\n</div></details>\n<p><img data-src=\"2.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>搜索镜像</li>\n</ol>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker search redis</pre></td></tr></table></figure><details class=\"info\"><summary>各项说明</summary><div>\n<p>NAME: 镜像仓库源的名称</p>\n<p>DESCRIPTION: 镜像的描述</p>\n<p>OFFICIAL: 是否 docker 官方发布</p>\n<p>START: 类似 Github 里面的 star，表示点赞、喜欢的意思。</p>\n<p>AUTOMATED: 自动构建。</p>\n</div></details>\n<p><img data-src=\"3.png\" alt=\"\"></p>\n<ol start=\"3\">\n<li>拉取镜像</li>\n</ol>\n<blockquote>\n<p>Docker 维护了镜像仓库，分为共有和私有两种，共有的官方仓库<span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=\"> Docker Hub (https://hub.docker.com/)</span> 是最重要最常用的镜像仓库。私有仓库（Private Registry）是开发者或者企业自建的镜像存储库，通常用来保存企业 内部的 Docker 镜像，用于内部开发流程和产品的发布、版本控制。</p>\n</blockquote>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker pull django</pre></td></tr></table></figure><ol start=\"4\">\n<li>删除镜像</li>\n</ol>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker image rm 镜像名或镜像id</pre></td></tr></table></figure><ol start=\"5\">\n<li>镜像备份与迁移</li>\n</ol>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker save -o ./ubuntu.tar ubuntu\t\t# 镜像打包成文件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker load -i ./ubuntu.tar\t\t\t# 将镜像加载到本地</pre></td></tr></table></figure><h2 id=\"仓库管理\"><a class=\"markdownIt-Anchor\" href=\"#仓库管理\">#</a> 仓库管理</h2>\n<blockquote>\n<p><code>仓库（Repository）</code> 是集中存放镜像的地方。以下介绍一下 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=\">Docker Hub</span>。当然不止 Docker hub，只是远程的服务商不一样，操作都是一样的。</p>\n</blockquote>\n<h3 id=\"docker-hub\"><a class=\"markdownIt-Anchor\" href=\"#docker-hub\">#</a> Docker Hub</h3>\n<blockquote>\n<p>目前 Docker 官方维护了一个公共仓库 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=\">Docker Hub</span>。</p>\n<p>大部分需求都可以通过在 Docker Hub 中直接下载镜像来实现。</p>\n</blockquote>\n<h3 id=\"注册\"><a class=\"markdownIt-Anchor\" href=\"#注册\">#</a> 注册</h3>\n<blockquote>\n<p>在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=\">https://hub.docker.com</span> 免费注册一个 Docker 账号。</p>\n</blockquote>\n<ul>\n<li>登录</li>\n</ul>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker login</pre></td></tr></table></figure><ul>\n<li>退出</li>\n</ul>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker logout</pre></td></tr></table></figure><ul>\n<li>可以通过 docker search 命令来查找官方仓库中的镜像，并利用 docker pull 命令来将它下载到本地。</li>\n<li>以 Mysql 为关键词进行搜索</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker search mysql</pre></td></tr></table></figure><ul>\n<li>使用 docker pull 将官方 ubuntu 镜像下载到本地：</li>\n</ul>\n<pre><code class=\"language-dock\">docker pull mysql\n</code></pre>\n<ul>\n<li>推送对象\n<ul>\n<li>用户登录后，可以通过 docker push 命令将自己的镜像推送到 Docker Hub。</li>\n<li>以下命令中的 username 请替换为你的 Docker 账号用户名。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker tag mysql username/mysql</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker image ls</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>docker push username/mysql</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>docker search username/mysql</pre></td></tr></table></figure>",
            "tags": [
                "Docker"
            ]
        }
    ]
}